# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    # - name: Test with pytest
    #   run: |
    #     make test
    # - name: Coverage code
    #   run: |
    #     make coverage
    - name: Run Tests with Coverage
      run: |
        pytest --cov=./ --cov-report=xml --cov-report=term
        COVERAGE=$(pytest --cov=./ --cov-report=term | grep "TOTAL" | awk '{print $4}' | sed 's/%//')
        echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV

    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v2
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml

    - name: Fail if coverage is less than 90%
      id: check-coverage
      run: |
        if [ $(echo "${COVERAGE} < 90" | bc) -eq 1 ]; then
          echo "Coverage is below 90%. Failing the build."
          exit 1
        else
          echo "Coverage is satisfactory: ${COVERAGE}%"
        fi

    - name: Create Comment on PR
      if: ${{ github.event_name == 'pull_request' }}
      uses: peter-evans/create-or-update-comment@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          **CI/CD Pipeline Result**
          - Build: ${{ job.status }}
          - Coverage: ${{ steps.check-coverage.outputs.coverage }}%
          - Status: ${{ job.status }}
          - [View Code Coverage](https://codecov.io/gh/${{ github.repository }}/commit/${{ github.sha }})